{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,IAAMQ,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAGtCH,EAAKC,KAAKM,iBAAiB,UAAU,SAAUC,GAC7CA,EAAMC,iBAON,IALA,IAAMC,EAAQC,SAASX,EAAKI,WAAWQ,OACjCC,EAAOF,SAASX,EAAKK,UAAUO,OAC/BE,EAASH,SAASX,EAAKM,YAAYM,OAEnCG,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAC/BD,EAASE,KAAK3B,EAAc0B,EAAI,EAAGN,EAAQM,EAAIH,IAGjDE,EAASG,SAAQ,SAAAC,GACfA,EACGC,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjB8B,EAAAlC,GAASmC,OAAOC,QAAQ,qBAAoCC,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,M,IAEnEkC,OAAM,SAAAL,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClB8B,EAAAlC,GAASmC,OAAOI,QAAQ,oBAAmCF,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delay = parseInt(refs.delayInput.value);\n  const step = parseInt(refs.stepInput.value);\n  const amount = parseInt(refs.amountInput.value);\n\n  const promises = [];\n  for (let i = 0; i < amount; i += 1) {\n    promises.push(createPromise(i + 1, delay + i * step));\n  }\n\n  promises.forEach(promise => {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  });\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","promises","i","push","forEach","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.0efa01c9.js.map"}